
# cf. Install and configure controller node
# https://docs.openstack.org/neutron/latest/install/controller-install-ubuntu.html

- name: task内の変数を定義します。
  set_fact:
    task_file: os-neutron-controller.yaml
    service_name: neutron
    check_table: networks
    env_vars:
      OS_USERNAME: "{{ OS_USERNAME }}"
      OS_PASSWORD: "{{ OS_PASSWORD }}"
      OS_PROJECT_NAME: "{{ OS_PROJECT_NAME }}"
      OS_USER_DOMAIN_NAME: "{{ OS_USER_DOMAIN_NAME }}"
      OS_PROJECT_DOMAIN_NAME: "{{ OS_PROJECT_DOMAIN_NAME }}"
      OS_AUTH_URL: "{{ OS_AUTH_URL }}"
      OS_IDENTITY_API_VERSION: "{{ OS_IDENTITY_API_VERSION }}"
      OS_IMAGE_API_VERSION: "{{ OS_IMAGE_API_VERSION }}"

- name: "{{ task_file }} networks テーブルがあるか確認します。"
  shell: |
    mysql -u root -p'{{ PW_MARIADB }}' -e "USE {{ service_name }}; SHOW TABLES LIKE 'networks';"
  register: db_check_result
  ignore_errors: true
  changed_when: false
  when: not ansible_check_mode

- name: "{{ task_file }} debug テーブルの確認結果を表示"
  debug:
    msg:
      - "RC: {{ db_check_result.rc }}"
      - "stdout_lines: {{ db_check_result.stdout_lines }}"
  when: not ansible_check_mode

- name: "{{ task_file }} DBを作成します。"
  mysql_db:
    login_user: root
    login_password: "{{ PW_MARIADB }}"
    login_unix_socket: /run/mysqld/mysqld.sock
    name: "{{ service_name }}"
    state: present
  when:
    - db_check_result is defined and "'networks' not in db_check_result.stdout"
    - not ansible_check_mode

- name: "{{ task_file }} localhost用のユーザーを追加します。"
  mysql_user:
    login_user: root
    login_password: "{{ PW_MARIADB }}"
    login_unix_socket: /run/mysqld/mysqld.sock
    name: "{{ service_name }}"
    password: "{{ PW_OS_NEUTRON }}"
    priv: '{{ service_name }}.*:ALL'
    host: localhost
    state: present
  when:
    - db_check_result is defined and "'networks' not in db_check_result.stdout"
    - not ansible_check_mode

- name: "{{ task_file }} 全ホスト用のユーザーを追加します。"
  mysql_user:
    login_user: root
    login_password: "{{ PW_MARIADB }}"
    login_unix_socket: /run/mysqld/mysqld.sock
    name: "{{ service_name }}"
    password: "{{ PW_OS_NEUTRON }}"
    priv: '{{service_name }}.*:ALL'
    host: "%"
    state: present
  when:
    - db_check_result is defined and "'networks' not in db_check_result.stdout"
    - not ansible_check_mode

- name: "{{ task_file }} ユーザーが既にあるか確認します。"
  shell: openstack user show neutron
  environment: "{{ env_vars }}"
  register: openstack_user
  ignore_errors: true

- name: "{{ task_file }} ユーザーの確認結果を表示"
  debug:
    msg:
      - "RC: {{ openstack_user.rc }}"
      - "stdout_lines: {{ openstack_user.stdout_lines }}"

- name: "{{ task_file }} ユーザーを作成します。"
  shell: openstack user create --domain default --password {{ PW_OS_NEUTRON }} neutron
  environment: "{{ env_vars }}"
  when: openstack_user.rc != 0 and not openstack_user.stdout_lines

- name: "{{ task_file }} adminロールに紐づいた{{ service_name }}ロールが既にあるか確認します。"
  shell: openstack role assignment list --project service --user neutron --role admin
  environment: "{{ env_vars }}"
  register: openstack_role
  ignore_errors: true

- name: "{{ task_file }} ロールの確認結果を表示"
  debug:
    msg:
      - "RC: {{ openstack_role.rc }}"
      - "stdout_lines: {{ openstack_role.stdout_lines }}"

- name: "{{ task_file }} adminロールに紐づいた{{ service_name }}ロールを作成します。"
  shell: openstack role add --project service --user neutron admin
  environment: "{{ env_vars }}"
  when: openstack_role.rc == 0 and not openstack_role.stdout_lines

- name: "{{ task_file }} サービスが既にあるか確認します。"
  shell: openstack service show neutron
  environment: "{{ env_vars }}"
  register: openstack_service
  ignore_errors: true

- name: "{{ task_file }} サービスの確認結果を表示"
  debug:
    msg:
      - "RC: {{ openstack_service.rc }}"
      - "stdout_lines: {{ openstack_service.stdout_lines }}"

- name: "{{ task_file }} サービスを作成します。"
  shell: openstack service create --name neutron --description "OpenStack Networking" network
  environment: "{{ env_vars }}"
  when: openstack_service.rc != 0 and not openstack_service.stdout_lines

- name: "{{ task_file }} エンドポイントが既にあるか確認します。"
  shell: openstack endpoint list --service neutron --interface internal
  environment: "{{ env_vars }}"
  register: openstack_endpoint
  ignore_errors: true

- name: "{{ task_file }} エンドポイントの確認結果を表示"
  debug:
    msg:
      - "RC: {{ openstack_endpoint.rc }}"
      - "stdout_lines: {{ openstack_endpoint.stdout_lines }}"

- name: "{{ task_file }} エンドポイントを作成します。"
  shell: "openstack endpoint create --region {{ region }} network {{ item }} 'http://{{ ansible_hostname }}.{{ domain }}:9696'"
  environment: "{{ env_vars }}"
  loop:
    - public
    - internal
    - admin
  when: openstack_endpoint.rc == 0 and not openstack_endpoint.stdout_lines

- name: "{{ task_file }} 各種パッケージを追加します。"
  apt:
    name: "{{ item }}"
    state: present
    update_cache: false
  with_items:
    - neutron-server
    - neutron-plugin-ml2
    - neutron-linuxbridge-agent
    - neutron-l3-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent

- name: "{{ task_file }} 各種設定ファイルを用意します。"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
    force: yes
  loop:
    - src: neutron-controller.conf.j2
      dest: /etc/neutron/neutron.conf
    - src: ml2_conf.ini.j2
      dest: /etc/neutron/plugins/ml2/ml2_conf.ini
    - src: linuxbridge_agent.ini.j2
      dest: /etc/neutron/plugins/ml2/linuxbridge_agent.ini
    - src: l3_agent.ini.j2
      dest: /etc/neutron/l3_agent.ini
    - src: dhcp_agent.ini.j2
      dest: /etc/neutron/dhcp_agent.ini
    - src: metadata_agent.ini.j2
      dest: /etc/neutron/metadata_agent.ini
  notify: restart neutron-services
  when:
    - not ansible_check_mode

- name: "{{ task_file }} DBのマイグレーションを行います。"
  command: "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head"
  become_method: sudo
  become_user: neutron
  notify: restart neutron-services
  when:
    - db_check_result is defined and "'networks' not in db_check_result.stdout"
    - not ansible_check_mode
